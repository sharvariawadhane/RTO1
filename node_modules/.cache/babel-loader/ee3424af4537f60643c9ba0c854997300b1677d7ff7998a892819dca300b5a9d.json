{"ast":null,"code":"// src/serviceWorkerRegistration.js\n\n// Check if the environment is localhost (to prevent using service workers in development)\nconst isLocalhost = Boolean(window.location.hostname === 'localhost' || window.location.hostname === '[::1]' || window.location.hostname === '127.0.0.1');\n\n// Register the service worker\nexport function register() {\n  if (isLocalhost) {\n    console.log('This is localhost, skipping service worker registration');\n  } else {\n    console.log('Registering service worker...');\n    if ('serviceWorker' in navigator) {\n      navigator.serviceWorker.register('/service-worker.js').then(registration => {\n        console.log('Service Worker registered:', registration);\n      }).catch(error => {\n        console.log('Service Worker registration failed:', error);\n      });\n    }\n  }\n}\n\n// Unregister the service worker\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.getRegistrations().then(registrations => {\n      registrations.forEach(registration => {\n        registration.unregister();\n      });\n    });\n  }\n}","map":{"version":3,"names":["isLocalhost","Boolean","window","location","hostname","register","console","log","navigator","serviceWorker","then","registration","catch","error","unregister","getRegistrations","registrations","forEach"],"sources":["C:/Users/Sharvari/Desktop/RTO/RTO/src/serviceWorkerRegistration.js"],"sourcesContent":["// src/serviceWorkerRegistration.js\r\n\r\n// Check if the environment is localhost (to prevent using service workers in development)\r\nconst isLocalhost = Boolean(\r\n    window.location.hostname === 'localhost' ||\r\n    window.location.hostname === '[::1]' ||\r\n    window.location.hostname === '127.0.0.1'\r\n  );\r\n  \r\n  // Register the service worker\r\n  export function register() {\r\n    if (isLocalhost) {\r\n      console.log('This is localhost, skipping service worker registration');\r\n    } else {\r\n      console.log('Registering service worker...');\r\n      if ('serviceWorker' in navigator) {\r\n        navigator.serviceWorker\r\n          .register('/service-worker.js')\r\n          .then((registration) => {\r\n            console.log('Service Worker registered:', registration);\r\n          })\r\n          .catch((error) => {\r\n            console.log('Service Worker registration failed:', error);\r\n          });\r\n      }\r\n    }\r\n  }\r\n  \r\n  // Unregister the service worker\r\n  export function unregister() {\r\n    if ('serviceWorker' in navigator) {\r\n      navigator.serviceWorker.getRegistrations().then((registrations) => {\r\n        registrations.forEach((registration) => {\r\n          registration.unregister();\r\n        });\r\n      });\r\n    }\r\n  }\r\n  \r\n"],"mappings":"AAAA;;AAEA;AACA,MAAMA,WAAW,GAAGC,OAAO,CACvBC,MAAM,CAACC,QAAQ,CAACC,QAAQ,KAAK,WAAW,IACxCF,MAAM,CAACC,QAAQ,CAACC,QAAQ,KAAK,OAAO,IACpCF,MAAM,CAACC,QAAQ,CAACC,QAAQ,KAAK,WAC/B,CAAC;;AAED;AACA,OAAO,SAASC,QAAQA,CAAA,EAAG;EACzB,IAAIL,WAAW,EAAE;IACfM,OAAO,CAACC,GAAG,CAAC,yDAAyD,CAAC;EACxE,CAAC,MAAM;IACLD,OAAO,CAACC,GAAG,CAAC,+BAA+B,CAAC;IAC5C,IAAI,eAAe,IAAIC,SAAS,EAAE;MAChCA,SAAS,CAACC,aAAa,CACpBJ,QAAQ,CAAC,oBAAoB,CAAC,CAC9BK,IAAI,CAAEC,YAAY,IAAK;QACtBL,OAAO,CAACC,GAAG,CAAC,4BAA4B,EAAEI,YAAY,CAAC;MACzD,CAAC,CAAC,CACDC,KAAK,CAAEC,KAAK,IAAK;QAChBP,OAAO,CAACC,GAAG,CAAC,qCAAqC,EAAEM,KAAK,CAAC;MAC3D,CAAC,CAAC;IACN;EACF;AACF;;AAEA;AACA,OAAO,SAASC,UAAUA,CAAA,EAAG;EAC3B,IAAI,eAAe,IAAIN,SAAS,EAAE;IAChCA,SAAS,CAACC,aAAa,CAACM,gBAAgB,CAAC,CAAC,CAACL,IAAI,CAAEM,aAAa,IAAK;MACjEA,aAAa,CAACC,OAAO,CAAEN,YAAY,IAAK;QACtCA,YAAY,CAACG,UAAU,CAAC,CAAC;MAC3B,CAAC,CAAC;IACJ,CAAC,CAAC;EACJ;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}